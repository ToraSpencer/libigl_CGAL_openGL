#include "dfs.h"
#include "list_to_matrix.h"
#include <vector>

// 图的深度优先搜索(DFS: depth first search)

// imp1
template <typename AType,
  typename DerivedD,
  typename DerivedP,
  typename DerivedC>
IGL_INLINE void igl::dfs(const std::vector<std::vector<AType>>& adjList,  const size_t startIdx,
  Eigen::PlainObjectBase<DerivedD> & discoveredIdx,
  Eigen::PlainObjectBase<DerivedP> & dfsTreeVec,
  Eigen::PlainObjectBase<DerivedC> & C)
{
  std::vector<typename DerivedD::Scalar> vD;
  std::vector<typename DerivedP::Scalar> vP;
  std::vector<typename DerivedC::Scalar> vC;
  dfs(adjList,startIdx,vD,vP,vC);
  list_to_matrix(vD,discoveredIdx);
  list_to_matrix(vP,dfsTreeVec);
  list_to_matrix(vC,C);
}


// imp2:
template <typename AType,
  typename DType,
  typename PType,
  typename CType>
IGL_INLINE void igl::dfs(const std::vector<std::vector<AType>> & adjList, const size_t startIdx,
  std::vector<DType> & discoveredIdx,
  std::vector<PType> & dfsTreeVec,
  std::vector<CType> & C)
{
  int versCount = startIdx+1;
  for(const auto & vec : adjList) 
      for(const auto & index : vec) 
          versCount = std::max(versCount, index +1);

  std::vector<bool> visited(versCount, false);
  dfsTreeVec.resize(versCount, -1);
  std::function<void(const size_t, const size_t)> dfs_helper;

  dfs_helper = [&discoveredIdx, &dfsTreeVec, &C, &dfs_helper, &visited, &adjList](const size_t index, const size_t parentIdx)
  {
      /*
            递归递推： dfs_helper(index, parentIdx) → dfs_helper(childIdx, index)
            递归终止： visited[index] == true; 或不存在childIdx，即adjList[index]为空；
      */

    if(visited[index])
        return;

    visited[index] = true;
    discoveredIdx.push_back(index);
    dfsTreeVec[index] = parentIdx;

    for(const auto childIdx : adjList[index])
        dfs_helper(childIdx, index);
    C.push_back(index);
  };

  dfs_helper(startIdx, -1);
}


#ifdef IGL_STATIC_LIBRARY
// Explicit template instantiation 模板特化：

// generated by autoexplicit.sh
template void igl::dfs<int, \
    Eigen::Matrix<int, -1, 1, 0, -1, 1>, \
    Eigen::Matrix<int, -1, 1, 0, -1, 1>, \
    Eigen::Matrix<int, -1, 1, 0, -1, 1> >\
    (   std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&, \
        const size_t, \
        Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> >&, \
        Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> >&, \
        Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> >&);

#endif
