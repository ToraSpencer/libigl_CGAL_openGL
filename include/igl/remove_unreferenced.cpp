#include "remove_unreferenced.h"
#include "slice.h"
#include <algorithm>


// жиди1.1.1
template <
  typename DerivedV, 
  typename DerivedF, 
  typename DerivedNV, 
  typename DerivedNF, 
  typename DerivedI>
IGL_INLINE void igl::remove_unreferenced(
  const Eigen::MatrixBase<DerivedV> &vers, 
  const Eigen::MatrixBase<DerivedF> &tris, 
  Eigen::PlainObjectBase<DerivedNV> &versOut, 
  Eigen::PlainObjectBase<DerivedNF> &trisOut, 
  Eigen::PlainObjectBase<DerivedI> &I)
{
  Eigen::Matrix<typename DerivedI::Scalar, Eigen::Dynamic, 1> J; 
  remove_unreferenced(vers, tris, versOut, trisOut, I, J); 
}


// жиди1.1
template <
  typename DerivedV, 
  typename DerivedF, 
  typename DerivedNV, 
  typename DerivedNF, 
  typename DerivedI, 
  typename DerivedJ>
IGL_INLINE void igl::remove_unreferenced(
  const Eigen::MatrixBase<DerivedV> &vers, 
  const Eigen::MatrixBase<DerivedF> &tris, 
  Eigen::PlainObjectBase<DerivedNV> &versOut, 
  Eigen::PlainObjectBase<DerivedNF> &trisOut, 
  Eigen::PlainObjectBase<DerivedI> &I, 
  Eigen::PlainObjectBase<DerivedJ> &J)
{
  using namespace std; 
  const size_t versCount = vers.rows(); 
  remove_unreferenced(versCount, tris, I, J); 
  trisOut = tris; 
  std::for_each(trisOut.data(), trisOut.data()+trisOut.size(), \
        [&I](typename DerivedNF::Scalar& verIdx)
          {
            verIdx =I(verIdx);
          }); 

  slice(vers, J, 1, versOut); 
}


// жиди1.
template <
  typename DerivedF, 
  typename DerivedI, 
  typename DerivedJ>
IGL_INLINE void igl::remove_unreferenced(
  const size_t versCount, 
  const Eigen::MatrixBase<DerivedF> &tris, 
  Eigen::PlainObjectBase<DerivedI> &I, 
  Eigen::PlainObjectBase<DerivedJ> &J)
{
  // Mark referenced vertices
  typedef Eigen::Matrix<bool, Eigen::Dynamic, 1> MatrixXb; 
  MatrixXb mark = MatrixXb::Zero(versCount, 1); 
  for(int i=0;  i < tris.rows();  ++i)
        for(int j=0;  j < tris.cols();  ++j)
              if (tris(i, j) != -1)
                    mark(tris(i, j)) = 1;  

  // Sum the occupied cells
  int newsize = mark.count(); 

  I.resize(versCount, 1); 
  J.resize(newsize, 1); 

  // Do a pass on the marked vector and remove the unreferenced vertices
  int count = 0; 
  for(int i=0; i<mark.rows(); ++i)
  {
    if (mark(i) == 1)
    {
      I(i) = count; 
      J(count) = i; 
      count++; 
    }
    else
        I(i) = -1; 
  }
}



#ifdef IGL_STATIC_LIBRARY
// Explicit template instantiation
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<float,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<float,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >(Eigen::MatrixBase<Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<float,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&); 
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<double,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  3,  1,  -1,  3> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  3,  1,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  3,  1,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<float,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<float,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<float,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  3,  1,  -1,  3> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<float,  -1,  3,  1,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  3,  1,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
// generated by autoexplicit.sh
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<float,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<float,  -1,  3,  1,  -1,  3>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<float,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<float,  -1,  3,  1,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  1,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  1,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
//template void igl::remove_unreferenced<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(unsigned long,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
// generated by autoexplicit.sh
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  1,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  1,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<long,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<long,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<double,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  3,  0,  -1,  3> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  3,  0,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  3,  0,  -1,  3> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  3,  0,  -1,  3> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  3,  0,  -1,  3>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  3,  0,  -1,  3> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  1,  0,  -1,  1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  1,  0,  -1,  1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&); 
template void igl::remove_unreferenced<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1>,  Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >(Eigen::MatrixBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::MatrixBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> > const&,  Eigen::PlainObjectBase<Eigen::Matrix<double,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&,  Eigen::PlainObjectBase<Eigen::Matrix<int,  -1,  -1,  0,  -1,  -1> >&); 
#endif
