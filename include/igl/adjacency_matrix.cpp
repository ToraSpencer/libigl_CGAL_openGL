#include "adjacency_matrix.h"

#include "verbose.h"

#include <vector>

// 生成三角网格或四边形网格的邻接矩阵；有向边存在元素为1，否则为0；
template <typename DerivedF, typename T>
IGL_INLINE void igl::adjacency_matrix(const Eigen::MatrixBase<DerivedF> & tris,  Eigen::SparseMatrix<T>& adjM)
{
  using namespace std;
  using namespace Eigen;
  typedef typename DerivedF::Scalar Index;
  typedef Triplet<T> IJV;

  int trisCount = tris.rows();
  vector<IJV > ijv;
  ijv.reserve(tris.size()*2);

  // Loop over **simplex** (i.e., **not quad**)
  for(int i = 0; i < trisCount; i++)
    for(int j = 0; j < tris.cols(); j++)
        for(int k = j+1; k < tris.cols(); k++)
        {
          // Get indices of edge: s --> d
          Index index1 = tris(i, j);
          Index index2 = tris(i, k);
          ijv.push_back(IJV(index1, index2, 1));
          ijv.push_back(IJV(index2, index1, 1));
        } 

  const Index versCount = tris.maxCoeff() + 1;
  adjM.resize(versCount, versCount);
  switch(tris.cols())
  {
    case 3:
      adjM.reserve(6* versCount);
      break;
    case 4:
      adjM.reserve(26* versCount);
      break;
  }
  adjM.setFromTriplets(ijv.begin(),ijv.end());

  // Force all non-zeros to be one

  // Iterate over outside
  for(int k=0; k < adjM.outerSize(); ++k)
  {
    // Iterate over inside
    for(typename Eigen::SparseMatrix<T>::InnerIterator it (adjM,k); it; ++it)
    {
      assert(it.value() != 0);
      adjM.coeffRef(it.row(),it.col()) = 1;
    }
  }
}


template <typename DerivedI, typename DerivedC, typename T>
IGL_INLINE void igl::adjacency_matrix(
  const Eigen::MatrixBase<DerivedI> & I,
  const Eigen::MatrixBase<DerivedC> & C,
  Eigen::SparseMatrix<T>& adjM)
{
  using namespace std;
  using namespace Eigen;

  typedef Triplet<T> IJV;
  vector<IJV > ijv;
  ijv.reserve(C(C.size()-1)*2);
  typedef typename DerivedI::Scalar Index;
  const Index versCount = I.maxCoeff()+1;
  {
    // loop over polygons
    for(Index p = 0;p<C.size()-1;p++)
    {
      // number of edges
      const Index np = C(p+1)-C(p);
      // loop over edges
      for(Index c = 0;c<np;c++)
      {
        const Index i = I(C(p)+c);
        const Index j = I(C(p)+((c+1)%np));
        ijv.emplace_back(i,j,1);
        ijv.emplace_back(j,i,1);
      }
    }
  }

  adjM.resize(versCount,versCount);
  adjM.reserve(6*versCount);
  adjM.setFromTriplets(ijv.begin(),ijv.end());

  // Force all non-zeros to be one

  // Iterate over outside
  for(int k=0; k<adjM.outerSize(); ++k)
  {
    // Iterate over inside
    for(typename Eigen::SparseMatrix<T>::InnerIterator it (adjM,k); it; ++it)
    {
      assert(it.value() != 0);
      adjM.coeffRef(it.row(),it.col()) = 1;
    }
  }
}

#ifdef IGL_STATIC_LIBRARY
// Explicit template instantiation
template void igl::adjacency_matrix<Eigen::Matrix<int, -1, 1, 0, -1, 1>, Eigen::Matrix<int, -1, 1, 0, -1, 1>, int>(Eigen::MatrixBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> > const&, Eigen::MatrixBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> > const&, Eigen::SparseMatrix<int, 0, int>& );
// generated by autoexplicit.sh
template void igl::adjacency_matrix<Eigen::Matrix<int, -1, -1, 0, -1, -1>, bool>(Eigen::MatrixBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> > const&, Eigen::SparseMatrix<bool, 0, int>&);
template void igl::adjacency_matrix<Eigen::Matrix<int, -1, -1, 0, -1, -1>, double>(Eigen::MatrixBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> > const&, Eigen::SparseMatrix<double, 0, int>&);
template void igl::adjacency_matrix<Eigen::Matrix<int, -1, -1, 0, -1, -1>, int>(Eigen::MatrixBase<Eigen::Matrix<int, -1, -1, 0, -1, -1> > const&, Eigen::SparseMatrix<int, 0, int>&);
template void igl::adjacency_matrix<Eigen::Matrix<int, -1, 3, 0, -1, 3>, int>(Eigen::MatrixBase<Eigen::Matrix<int, -1, 3, 0, -1, 3> > const&, Eigen::SparseMatrix<int, 0, int>&);
#endif
